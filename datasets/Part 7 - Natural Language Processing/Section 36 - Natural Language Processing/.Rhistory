# Natural Language Processing ####
setwd("~/GitHub/machinelearning-az/datasets/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
View(dataset_original)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
rm(Corpus)
rm(corpus)
corpus = VCorpus(VectorSource(dataset_original$Review))
View(dataset_original)
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
# Consultar el primer elemento del corpus ####
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words ####
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor ####
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 10)
# PredicciÃ³n de los resultados con el conjunto de testing ####
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusiÃ³n ####
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing ####
setwd("~/GitHub/machinelearning-az/datasets/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
# Importar el data set ####
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos ####
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus ####
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words ####
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificaciÃ³n como factor ####
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el Random Forest con el conjunto de entrenamiento. ####
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 10)
# PredicciÃ³n de los resultados con el conjunto de testing ####
y_pred = predict(classifier, newdata = testing_set[,-692])
y_pred
# Crear la matriz de confusiÃ³n ####
cm = table(testing_set[, 692], y_pred)
cm
# Natural Language Processing ####
setwd("~/GitHub/machinelearning-az/datasets/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
# Importar el data set ####
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
View(dataset_original)
# Limpieza de textos ####
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus ####
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words ####
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
library(sampling)
library(survey)
library(tidyverse)
data <- read_csv("D:/Kaggle/Seguro/Seguro.csv")
data_0 <- data %>%
filter(target == 0)
data_1 <- data %>%
filter(target == 1)
View(data)
# Selection muestra categoría 0
data_0$pi_k <- inclusionprobabilities(a = data_0$ps_car_12, n = length(data_0$ps_car_12) * .5)
set.seed(30042021)
set.seed(30042021)
indica_piPS_0 <- as.logical(UPbrewer(data_0$pi_k))
data_0 <- data %>%
filter(target == 0)
data_1 <- data %>%
filter(target == 1)
# Selection muestra categoría 0
data_0$pi_k <- inclusionprobabilities(a = data_0$ps_car_12, n = length(data_0$ps_car_12) * .5)
set.seed(30042021)
indica_piPS_0 <- as.logical(UPbrewer(data_0$pi_k))
sample_train_0 <- data_0[indica_piPS_0,]
sample_test_0 <- data_0[!indica_piPS_0,]
# Estimation
design_piPS_0 <- svydesign(id = ~1, fpc= ~pi_k, data = sample_train_0, pps = "brewer")
(estima_piPS_0 <- svytotal(~ps_car_12, design_piPS_0))
100 * cv(estima_piPS_0) # Coeficient of variation
# Selection muestra categoría 1
data_1$pi_k <- inclusionprobabilities(a = data_1$ps_car_12, n = length(data_1$ps_car_12) * .8)
set.seed(30042021)
indica_piPS <- as.logical(UPbrewer(data_1$pi_k))
indica_piPS_1 <- indica_piPS
sample_train_1 <- data_1[indica_piPS_1,]
sample_test_1 <- data_1[!indica_piPS_1,]
# Estimation
design_piPS_1 <- svydesign(id = ~1, fpc= ~pi_k, data = sample_train_1, pps = "brewer")
(estima_piPS_1 <- svytotal(~ps_car_12, design_piPS_1))
100 * cv(estima_piPS_1) # Coeficient of variation
### Guardar los conjuntos de test y train
data_train <- rbind(sample_train_0, sample_train_1)
data_test <- rbind(sample_test_0, sample_test_1)
data_train <- data_train[, -60]
data_test <- data_test[, -60]
write_csv(data_train, "D:/Kaggle/Seguro/Seguro_train v3.csv")
write_csv(data_test, "D:/Kaggle/Seguro/Seguro_test v3.csv")
