# Importar el dataset
dataset = read.csv('50_Startups.csv')
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# RegresiÃ³n Lineal MÃºltiple
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Importar el dataset
dataset = read.csv('50_Startups.csv')
# Codificar las variables categÃ³ricas
dataset$State = as.factor(dataset$State)
str(dataset$State)
levels(dataset$State)
lebels(dataset$State)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
regression = lm(formula = Profit ~ .,
data = training_set)
summary(regression)
# Importar el dataset
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Importar el dataset
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
View(dataset)
# Codificar las variables categÃ³ricas
dataset$State = as.factor(dataset$State)
str(dataset$State)
# Importar el dataset
dataset = read.csv('50_Startups.csv')
# Codificar las variables categÃ³ricas
dataset$State = as.factor(dataset$State)
str(dataset$State)
# RegresiÃ³n Lineal MÃºltiple
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
library(glmnet)
library(mvtnorm)
library(corrplot)
install.packages("glmnet")
install.packages("mvtnorm")
install.packages("corrplot")
library(glmnet)
library(mvtnorm)
library(corrplot)
n=500
pj=10
J=5
rho=0.7
sigma=matrix(rep(rho,pj*pj),ncol=pj) ; diag(sigma)=rep(1,pj)
x1=rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma)
x2=rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma)
x3=rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma)
x4=rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma)
x5=rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma)
x=cbind(x1,x2,x3,x4,x5)
corx=cor(x); corrplot(corx)
b1=.01;b2=1;b3=1.2;b4=.05;b5=.4
beta1=runif(pj,b1,2*b1)
beta2=runif(pj,b2,2*b2)
beta3=runif(pj,b3,2*b3)
beta4=runif(pj,b4,2*b4)
beta5=runif(pj,b5,2*b5)
beta=c(beta1,beta2,beta3,beta4,beta5)
y=x%*%beta+rnorm(n,sd=.5)
plot(y,x[,3])
cvmod <- cv.glmnet(x,y,alpha=1)
cvmod
lass=glmnet(x,y, alpha = 1)
col=c(rep(1,pj),rep(2,pj),rep(3,pj),rep(4,pj),rep(5,pj))
plot(lass,"lambda",col=col)
abline(v = cvmod$lambda.min, col = "red", lty = 2)
coef(lass, s = cvmod$lambda.min)
set.seed(123456)
n1 <- sample(seq(1:dim(x)[1]),dim(x)[1]-50)
train <- as.data.frame(x[n1,])
train[,"y"] <- y[n1]
test <- as.data.frame(x[-n1,])
test[,"y"] <- y[-n1]
mod_lm <- lm(y ~ ., data = train)
summary(mod_lm)
lm_pred=predict(mod_lm,newdata = test)
msep1=mean((test-lm_pred)^2)
msep1
X=model.matrix(y~.,train)[,!colnames(train) %in% "y"]
Xtest=model.matrix(y~.,test)[,!colnames(test) %in% "y"]
y=train$y
ytest=test$y
y
set.seed(12345)
cvmod=cv.glmnet(X,y,alpha=0)
mod_pen2 <- glmnet(X, y, alpha = 0, lambda = cvmod$lambda.min)
round(mod_pen2$beta, 4)
predp2=predict(mod_pen2,Xtest)
msep2=mean((ytest-predp2)^2)
msep2
set.seed(12345)
cvLass=cv.glmnet(X,y,alpha=1)
mod_lass2 <- glmnet(X, y, alpha = 1, lambda = cvLass$lambda.min)
round(mod_lass2$beta, 4)
predp3=predict(mod_lass2,Xtest)
msep3=mean((ytest-predp3)^2)
msep3
corx=cor(x); corrplot(corx)
b1=.01;b2=1;b3=1.2;b4=.05;b5=.4
beta1=runif(pj,b1,2*b1)
beta2=runif(pj,b2,2*b2)
beta3=runif(pj,b3,2*b3)
beta4=runif(pj,b4,2*b4)
beta5=runif(pj,b5,2*b5)
beta=c(beta1,beta2,beta3,beta4,beta5)
y=x%*%beta+rnorm(n,sd=.5)
plot(y,x[,3])
y
lass
col
plot(lass,"lambda",col=col)
abline(v = cvmod$lambda.min, col = "red", lty = 2)
coef(lass, s = cvmod$lambda.min)
set.seed(123456)
n1 <- sample(seq(1:dim(x)[1]),dim(x)[1]-50)
train <- as.data.frame(x[n1,])
train[,"y"] <- y[n1]
test <- as.data.frame(x[-n1,])
test[,"y"] <- y[-n1]
########################################################################
#Modelo lineal
mod_lm <- lm(y ~ ., data = train)
summary(mod_lm)
lm_pred=predict(mod_lm,newdata = test)
msep1=mean((test-lm_pred)^2)
msep1
library(glmnet)
X=model.matrix(y~.,train)[,!colnames(train) %in% "y"]
Xtest=model.matrix(y~.,test)[,!colnames(test) %in% "y"]
y=train$y
ytest=test$y
ytest
y
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 6 - Polynomial Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n lineal del suedlo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("PredicciÃ³n polinÃ³mica del suedlo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resultados con RegresiÃ³n Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
y_pred
y_pred_poly = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred_poly
poly_reg
summary(poly_reg)
setwd("~/GitHub/machinelearning-az/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
setwd("~/GitHub/machinelearning-az/datasets/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
install.packages("e1071")
# Ajustar SVR con el Conjunto de Datos
#install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial")
summary(regression)
# PredicciÃ³n de nuevos resultados con SVR
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
y_pred
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("PredicciÃ³n (SVR)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción (SVR)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
