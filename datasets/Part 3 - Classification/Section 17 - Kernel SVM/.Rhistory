X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Regresión Logística ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
# Visualización del conjunto de entrenamiento ####
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualización del conjunto de testing ####
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = gaussian)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = gaussian)
BIC(classifier)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Regresión Logística ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Regresión Logística ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Regresión Logística ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
cm
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
cm
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
View(dataset)
dataset = dataset[, 2:5]
dataset$Gender <- as.factor(dataset$Gender)
str(dataset)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
summary(classifier)
AIC(classifier)
BIC(classifier)
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
BIC(classifier)
AIC(classifier)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = sqrt)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = "logit")
BIC(classifier)
AIC(classifier)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = "logit")
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "logit"))
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "logit"))
BIC(classifier)
AIC(classifier)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "probit"))
BIC(classifier)
AIC(classifier)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "cloglog"))
BIC(classifier)
AIC(classifier)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "sqrt"))
BIC(classifier)
AIC(classifier)
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "logit"))
BIC(classifier)
AIC(classifier)
# Regresión Logística ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 14 - Logistic Regression")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
dataset$Gender <- as.factor(dataset$Gender)
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
#training_set[,1:2] = scale(training_set[,1:2])
#testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "logit"))
BIC(classifier)
AIC(classifier)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
dataset$Gender <- as.factor(dataset$Gender)
# Dividir los datos en conjunto de entrenamiento y conjunto de test ####
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores ####
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento. ####
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial(link = "logit"))
BIC(classifier)
AIC(classifier)
# Predicción de los resultados con el conjunto de testing ####
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# K - Nearest Neighbors (K-NN)
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(class)
y_pred = knn(train = training_set[,-3],
test = testing_set[,-3],
cl = training_set[,3],
k = 5)
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
cm
# Visualización del conjunto de entrenamiento ####
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)")
BIC(classifier)
# SVM  ####
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)")
# Importar el dataset ####
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el SVM con el conjunto de entrenamiento. ####
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
BIC(classifier)
AIC(classifier)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "rbf")
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial basis")
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing ####
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión ####
cm = table(testing_set[, 3], y_pred)
cm
# Visualización del conjunto de entrenamiento ####
#install.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("ElemStatLearn")
# Visualización del conjunto de entrenamiento ####
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/GitHub/machinelearning-az/datasets/Part 3 - Classification/Section 17 - Kernel SVM")
